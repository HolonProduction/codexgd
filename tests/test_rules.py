from codexgd.rules.common import (
    SNAKE_CASE,
    PASCAL_CASE,
    CONSTANT_CASE,
    CAMEL_CASE,
    KEBAB_CASE,
)

import pytest
import regex


@pytest.mark.parametrize(
    "pattern, string, result",
    [
        (SNAKE_CASE, "a", True),
        (SNAKE_CASE, "a_b", True),
        (SNAKE_CASE, "a_b_c", True),
        (SNAKE_CASE, "hello_world", True),
        (SNAKE_CASE, "node_2_d", True),
        (SNAKE_CASE, "node_2d", True),
        (SNAKE_CASE, "2_d", True),
        (SNAKE_CASE, "2d", True),
        (SNAKE_CASE, "", False),
        (SNAKE_CASE, "_", False),
        (SNAKE_CASE, "_hello_world", False),
        (SNAKE_CASE, "hello_world_", False),
        (SNAKE_CASE, "ABC", False),
        (SNAKE_CASE, "Node2D", False),
        (SNAKE_CASE, "NO_WRONG", False),
        (SNAKE_CASE, "a-b", False),
        (SNAKE_CASE, "helloWorld", False),
        (PASCAL_CASE, "A", True),
        (PASCAL_CASE, "AB", True),
        (PASCAL_CASE, "ABC", True),
        (PASCAL_CASE, "HelloWorld", True),
        (PASCAL_CASE, "DoReMiA", True),
        (PASCAL_CASE, "Node2D", True),
        (PASCAL_CASE, "2DNode", True),
        (PASCAL_CASE, "", False),
        (PASCAL_CASE, "_", False),
        (PASCAL_CASE, "_HelloWorld", False),
        (PASCAL_CASE, "HelloWorld_", False),
        (PASCAL_CASE, "hello", False),
        (PASCAL_CASE, "hello_world", False),
        (PASCAL_CASE, "helloWorld", False),
        (PASCAL_CASE, "hello-world", False),
        (PASCAL_CASE, "HELLO_WORLD", False),
        (CONSTANT_CASE, "A", True),
        (CONSTANT_CASE, "AB", True),
        (CONSTANT_CASE, "ABC", True),
        (CONSTANT_CASE, "A_B", True),
        (CONSTANT_CASE, "A_B_C", True),
        (CONSTANT_CASE, "HELLO_WORLD", True),
        (CONSTANT_CASE, "NODE_2D", True),
        (CONSTANT_CASE, "NODE2D", True),
        (CONSTANT_CASE, "3D_VIEW", True),
        (CONSTANT_CASE, "", False),
        (CONSTANT_CASE, "a", False),
        (CONSTANT_CASE, "hello_world", False),
        (CONSTANT_CASE, "HelloWorld", False),
        (CONSTANT_CASE, "helloWorld", False),
        (CONSTANT_CASE, "hello-world", False),
        (CONSTANT_CASE, "_", False),
        (CONSTANT_CASE, "_HELLO_WORLD", False),
        (CONSTANT_CASE, "HELLO_WORLD_", False),
        (CAMEL_CASE, "a", True),
        (CAMEL_CASE, "ab", True),
        (CAMEL_CASE, "abc", True),
        (CAMEL_CASE, "aB", True),
        (CAMEL_CASE, "aBC", True),
        (CAMEL_CASE, "aBc", True),
        (CAMEL_CASE, "helloWorld", True),
        (CAMEL_CASE, "node2d", True),
        (CAMEL_CASE, "node3D", True),
        (CAMEL_CASE, "3test", True),
        (CAMEL_CASE, "morePartsAreHere", True),
        (CAMEL_CASE, "", False),
        (CAMEL_CASE, "A", False),
        (CAMEL_CASE, "hello_world", False),
        (CAMEL_CASE, "HelloWorld", False),
        (CAMEL_CASE, "HELLO_WORLD", False),
        (CAMEL_CASE, "hello-world", False),
        (CAMEL_CASE, "_", False),
        (CAMEL_CASE, "_helloWorld", False),
        (CAMEL_CASE, "helloWorld_", False),
        (KEBAB_CASE, "a", True),
        (KEBAB_CASE, "a-b", True),
        (KEBAB_CASE, "a-b-c", True),
        (KEBAB_CASE, "hello-world", True),
        (KEBAB_CASE, "node-2-d", True),
        (KEBAB_CASE, "node-2d", True),
        (KEBAB_CASE, "2d", True),
        (KEBAB_CASE, "2-d", True),
        (KEBAB_CASE, "", False),
        (KEBAB_CASE, "-", False),
        (KEBAB_CASE, "-hello-world", False),
        (KEBAB_CASE, "hello-world-", False),
        (KEBAB_CASE, "ABC", False),
        (KEBAB_CASE, "Node2D", False),
        (KEBAB_CASE, "NO-WRONG", False),
        (KEBAB_CASE, "a_b", False),
        (KEBAB_CASE, "hello_world", False),
        (KEBAB_CASE, "helloWorld", False),
    ],
)
def test_case_regex(pattern, string, result):
    assert (regex.match(f"^{pattern}$", string) != None) == result
